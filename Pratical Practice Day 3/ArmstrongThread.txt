class ArmstrongThread extends Thread {
    private int limit;

    ArmstrongThread(int limit) {
        this.limit = limit;
    }

    private boolean isArmstrong(int num) {
        int originalNum, remainder, result = 0, n = 0;
        originalNum = num;

        while (originalNum != 0) {
            originalNum /= 10;
            ++n;
        }

        originalNum = num;

        while (originalNum != 0) {
            remainder = originalNum % 10;
            result += Math.pow(remainder, n);
            originalNum /= 10;
        }

        return result == num;
    }

    public void run() {
        System.out.println("ArmstrongThread: Thread is running.");
        for (int i = 0; i <= limit; i++) {
            if (isArmstrong(i)) {
                System.out.println("ArmstrongThread: " + i);
            }
        }
        System.out.println("ArmstrongThread: Thread exiting.");
    }
}

class FibonacciThread extends Thread {
    private int limit;

    FibonacciThread(int limit) {
        this.limit = limit;
    }

    private void generateFibonacci(int n) {
        int n1 = 0, n2 = 1, n3;
        System.out.print("FibonacciThread: " + n1 + " " + n2);

        for (int i = 2; i < n; ++i) {
            n3 = n1 + n2;
            System.out.print(" " + n3);
            n1 = n2;
            n2 = n3;
        }
        System.out.println();
    }

    public void run() {
        System.out.println("FibonacciThread: Thread is running.");
        generateFibonacci(limit);
        System.out.println("FibonacciThread: Thread exiting.");
    }
}

public class Main {
    public static void main(String[] args) {
        int armstrongLimit = 1000;
        int fibonacciLimit = 10;

        ArmstrongThread armstrongThread = new ArmstrongThread(armstrongLimit);
        FibonacciThread fibonacciThread = new FibonacciThread(fibonacciLimit);

        System.out.println("Main: Starting threads.");

        armstrongThread.start();
        fibonacciThread.start();

        try {
            armstrongThread.join();
            fibonacciThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Main: All threads completed.");
    }
}
